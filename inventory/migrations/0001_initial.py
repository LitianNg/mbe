# Generated by Django 2.2.5 on 2021-05-30 06:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_seller', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('sku_code', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=200, null=True)),
                ('unit', models.CharField(choices=[('PCS', 'PCS'), ('BOX', 'BOX'), ('PACK', 'PACK'), ('BOTTLE', 'BOTTLE'), ('OTHER', 'OTHER')], max_length=200, null=True)),
                ('product_quantity', models.PositiveIntegerField(null=True)),
                ('product_price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('location', models.CharField(max_length=200, null=True)),
                ('rack', models.CharField(max_length=200, null=True)),
                ('pallet', models.CharField(max_length=200, null=True)),
                ('remarks', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=200, null=True)),
                ('phone', models.CharField(max_length=11, null=True)),
                ('email', models.CharField(max_length=200, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionProductQty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.CharField(max_length=200, null=True)),
                ('action', models.CharField(max_length=200, null=True)),
                ('qty', models.IntegerField(null=True)),
                ('current_qty', models.PositiveIntegerField(null=True)),
                ('reason', models.CharField(max_length=200, null=True)),
                ('record_product', models.CharField(max_length=200, null=True)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.Product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='seller',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.Seller', to_field='user_id'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('order_quantity', models.PositiveIntegerField(null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('platform', models.CharField(max_length=200, null=True)),
                ('awb', models.CharField(max_length=200, null=True)),
                ('courier', models.CharField(max_length=200, null=True)),
                ('remarks', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Out of Delivery', 'Out of Delivery'), ('Completed', 'Completed'), ('Rejected', 'Rejected')], max_length=200, null=True)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.Product')),
                ('seller', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.Seller')),
            ],
        ),
        migrations.CreateModel(
            name='Inbound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('product_name', models.CharField(max_length=200, null=True)),
                ('sku_code', models.CharField(max_length=200, null=True)),
                ('unit', models.CharField(choices=[('PCS', 'PCS'), ('BOX', 'BOX'), ('PACK', 'PACK'), ('BOTTLE', 'BOTTLE'), ('OTHER', 'OTHER')], max_length=200, null=True)),
                ('product_quantity', models.IntegerField(null=True)),
                ('product_price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('remarks', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=200)),
                ('seller', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.Seller', to_field='user_id')),
            ],
        ),
    ]
